use crate::util;
use hex::{
    anyhow,
    assets::{Shape, Texture},
    components::Sprite,
    ecs::{ComponentManager, EntityManager},
    glium::{
        texture::MipmapsOption,
        uniforms::{MagnifySamplerFilter, MinifySamplerFilter, SamplerBehavior},
        Display,
    },
    math::Vec2d,
};
use hex_ui::{ab_glyph::FontRef, ScreenTransform, Text};

pub struct MainMenu {}

impl MainMenu {
    pub fn new(
        display: &Display,
        (em, cm): (&mut EntityManager, &mut ComponentManager),
    ) -> anyhow::Result<Self> {
        let screen_transform = ScreenTransform::new(Vec2d([0.0; 2]), 0.0, Vec2d([1.0; 2]), true);
        let font = FontRef::try_from_slice(include_bytes!("font.otf"))?;
        let _button_texture = util::load_texture(display, include_bytes!("button.png"))?;
        let _window_texture = util::load_texture(display, include_bytes!("window.png"))?;
        let text_texture = Texture::text(
            display,
            "Play",
            font.clone(),
            (50.0, 0, 1000.0),
            [0.0, 0.25, 0.0, 1.0],
            MipmapsOption::AutoGeneratedMipmaps,
            SamplerBehavior {
                magnify_filter: MagnifySamplerFilter::Nearest,
                minify_filter: MinifySamplerFilter::Nearest,
                ..Default::default()
            },
        )?;
        let text_sprite = Sprite::new(
            Shape::rect(display, Vec2d([1.0; 2]))?,
            text_texture,
            [1.0; 4],
            0.0,
            true,
        );
        let text_entity = em.add();
        let _text = cm.add(text_entity, text_sprite, em);
        let _screen_transform = cm.add(text_entity, screen_transform, em);

        Ok(Self {})
    }
}
