use crate::player::{state::MENU_MODE, State};
use crate::util;
use hex::{
    anyhow,
    assets::{Shape, Texture},
    components::Sprite,
    ecs::{ComponentManager, EntityManager, Id},
    glium::{
        texture::MipmapsOption,
        uniforms::{MagnifySamplerFilter, MinifySamplerFilter, SamplerBehavior},
        Display,
    },
    math::Vec2d,
};
use hex_ui::{
    ab_glyph::FontRef,
    ui::{Button, Callback},
    ScreenTransform, Text, Ui,
};

pub struct MainMenu {
    pub font: FontRef<'static>,
    pub text: Id,
    pub button: Id,
    pub window: Id,
}

impl MainMenu {
    pub fn new(
        display: &Display,
        (em, cm): (&mut EntityManager, &mut ComponentManager),
    ) -> anyhow::Result<Self> {
        let font = FontRef::try_from_slice(include_bytes!("font.otf"))?;
        let text_texture = Texture::text(
            display,
            "Play",
            font.clone(),
            (50.0, 0, 1000.0),
            [0.0, 0.25, 0.0, 1.0],
            MipmapsOption::AutoGeneratedMipmaps,
            SamplerBehavior {
                magnify_filter: MagnifySamplerFilter::Nearest,
                minify_filter: MinifySamplerFilter::Nearest,
                ..Default::default()
            },
        )?;
        let text_sprite = Sprite::new(
            Shape::rect(display, Vec2d([1.0; 2]))?,
            text_texture,
            [1.0; 4],
            2.0,
            true,
        );
        let text = em.add();

        cm.add(text, text_sprite, em);

        cm.add(
            text,
            ScreenTransform::new(Vec2d([0.0; 2]), 0.0, Vec2d([1.0; 2]), true),
            em,
        );

        let button_texture = util::load_texture(display, include_bytes!("button.png"))?;
        let button_sprite = Sprite::new(
            Shape::rect(display, Vec2d([1.0; 2]))?,
            button_texture,
            [1.0; 4],
            1.0,
            true,
        );
        let button = em.add();

        cm.add(button, button_sprite, em);
        cm.add(
            button,
            ScreenTransform::new(Vec2d([0.0; 2]), 0.0, Vec2d([5.0; 2]), true),
            em,
        );
        cm.add(
            button,
            Box::new(Button {
                dimensions: Vec2d::new(1.0, 0.5),
                active: true,
            }) as Box<dyn Ui>,
            em,
        );
        cm.add(button, Callback::default(), em);

        let window_texture = util::load_texture(display, include_bytes!("window.png"))?;
        let window_sprite = Sprite::new(
            Shape::rect(display, Vec2d([1.0; 2]))?,
            window_texture,
            [1.0; 4],
            0.0,
            true,
        );
        let window = em.add();

        cm.add(window, window_sprite, em);
        cm.add(
            window,
            ScreenTransform::new(Vec2d([0.0; 2]), 0.0, Vec2d([10.0; 2]), true),
            em,
        );

        Ok(Self {
            font,
            text,
            button,
            window,
        })
    }

    pub fn update(&self, player: Id, (_, cm): (&mut EntityManager, &mut ComponentManager)) {
        if let Some(active) = cm.get::<State>(player).map(|p| p.mode == MENU_MODE) {
            if let Some(text) = cm.get_mut::<Sprite>(self.text) {
                text.active = active;
            }

            if let Some(button) = cm.get_mut::<Sprite>(self.button) {
                button.active = active;
            }

            if let Some(window) = cm.get_mut::<Sprite>(self.window) {
                window.active = active;
            }
        }
    }
}
