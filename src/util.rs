use hex::{
    anyhow,
    assets::Texture,
    glium::{
        texture::{MipmapsOption, RawImage2d},
        uniforms::{MagnifySamplerFilter, SamplerBehavior},
        Display,
    },
    math::Vec2d,
};
use std::io::Cursor;

pub fn load_texture(display: &Display, p: &[u8]) -> anyhow::Result<Texture> {
    let mut img = image::io::Reader::new(Cursor::new(p));

    img.set_format(image::ImageFormat::Png);

    let img = img.decode()?.to_rgba8();
    let dims = img.dimensions();
    let img = img.into_raw();

    Texture::new(
        display,
        RawImage2d::from_raw_rgba_reversed(&img, dims),
        MipmapsOption::AutoGeneratedMipmaps,
        SamplerBehavior {
            magnify_filter: MagnifySamplerFilter::Nearest,
            ..Default::default()
        },
    )
}

pub fn lerp(f1: f32, f2: f32, t: f32) -> f32 {
    f1 * (1.0 - t) + f2 * t
}

pub fn lerp_vec2d(v1: Vec2d, v2: Vec2d, t: f32) -> Vec2d {
    Vec2d::new(lerp(v1.x(), v2.x(), t), lerp(v1.y(), v2.y(), t))
}
